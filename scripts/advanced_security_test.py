#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ EduFlow
–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏ —Ö–∞–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/advanced_security_test.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
- XSS –∞—Ç–∞–∫–∏
- CSRF –∞—Ç–∞–∫–∏
- –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∏
- –ü–µ—Ä–µ–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π
- –ò–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º—ã
- –û–±—Ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- –£—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
- –£—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
- –ê—Ç–∞–∫–∏ –Ω–∞ API
"""

import sys
import os
import time
import random
import string
import hashlib
import base64
import json
import re
from datetime import datetime, timedelta
from typing import Any, Optional

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models import User, Subject, Material, Submission
from werkzeug.security import generate_password_hash, check_password_hash
from flask import current_app
from scripts.test_utils import global_cleanup

class SecurityTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.app = create_app()
        self.test_results = []
        self.vulnerabilities_found = []
        self.security_score = 100
        self.created_entities = []  # –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        
    def log_attack(self, attack_type: str, description: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç–∞–∫–∏"""
        result = {
            "attack_type": attack_type,
            "description": description,
            "success": success,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        if success:
            self.vulnerabilities_found.append(result)
            self.security_score -= 10
            print(f"   üö® –£–Ø–ó–í–ò–ú–û–°–¢–¨ –ù–ê–ô–î–ï–ù–ê: {attack_type}")
        else:
            print(f"   ‚úÖ –ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {attack_type}")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîí –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò EDUFLOW")
        print("=" * 80)
        print("üéØ –ò–º–∏—Ç–∞—Ü–∏—è –∞—Ç–∞–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ö–∞–∫–µ—Ä–æ–≤...")
        print()
        
        try:
            with self.app.app_context():
                # –¢–µ—Å—Ç 1: SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏
                self.test_sql_injection()
                
                # –¢–µ—Å—Ç 2: XSS –∞—Ç–∞–∫–∏
                self.test_xss_attacks()
                
                # –¢–µ—Å—Ç 3: CSRF –∞—Ç–∞–∫–∏
                self.test_csrf_attacks()
                
                # –¢–µ—Å—Ç 4: –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∏
                self.test_bruteforce_attacks()
                
                # –¢–µ—Å—Ç 5: –ò–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º—ã
                self.test_form_injection()
                
                # –¢–µ—Å—Ç 6: –û–±—Ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self.test_auth_bypass()
                
                # –¢–µ—Å—Ç 7: –£—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
                self.test_session_vulnerabilities()
                
                # –¢–µ—Å—Ç 8: –£—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                self.test_data_leakage()
                
                # –¢–µ—Å—Ç 9: –ê—Ç–∞–∫–∏ –Ω–∞ API
                self.test_api_vulnerabilities()
                
                # –¢–µ—Å—Ç 10: –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è
                self.test_social_engineering()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
                self.generate_security_report()
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.cleanup_all_test_data()
    
    def cleanup_all_test_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•...")
        
        with self.app.app_context():
            try:
                # –û—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
                for entity in self.created_entities:
                    if hasattr(entity, 'id'):
                        try:
                            db.session.delete(entity)
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {type(entity).__name__}: {e}")
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                test_users = User.query.filter(User.username.like('hacker_test_%')).all()
                for user in test_users:
                    try:
                        db.session.delete(user)
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                test_subjects = Subject.query.filter(Subject.title.like('Test Subject%')).all()
                for subject in test_subjects:
                    try:
                        db.session.delete(subject)
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                test_materials = Material.query.filter(Material.title.like('Test Material%')).all()
                for material in test_materials:
                    try:
                        db.session.delete(material)
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
                
                # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                test_submissions = Submission.query.filter(Submission.text.like('Test submission%')).all()
                for submission in test_submissions:
                    try:
                        db.session.delete(submission)
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
                
                # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                db.session.commit()
                print("   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
                
                # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                print("   üßπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
                global_cleanup()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                db.session.rollback()
    
    def test_sql_injection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π"""
        print("\nüó°Ô∏è –¢–ï–°–¢ 1: SQL-–ò–ù–™–ï–ö–¶–ò–ò")
        print("-" * 40)
        
        sql_payloads = [
            "' OR '1'='1",
            "'; DROP TABLE users; --",
            "' UNION SELECT * FROM users --",
            "admin'--",
            "' OR 1=1#",
            "' OR 'x'='x",
            "'; EXEC xp_cmdshell('dir'); --",
            "' UNION SELECT password FROM users WHERE username='admin'--"
        ]
        
        for payload in sql_payloads:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ payload –æ–ø–∞—Å–Ω—ã–µ SQL-–∫–æ–º–∞–Ω–¥—ã
                dangerous_keywords = ['DROP', 'DELETE', 'UPDATE', 'INSERT', 'UNION', 'EXEC', 'xp_']
                is_dangerous = any(keyword in payload.upper() for keyword in dangerous_keywords)
                
                if is_dangerous:
                    self.log_attack(
                        "SQL Injection",
                        f"–ü–æ–ø—ã—Ç–∫–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏: {payload}",
                        False,
                        "–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∞—Å–Ω—ã–µ SQL-–∫–æ–º–∞–Ω–¥—ã"
                    )
                else:
                    self.log_attack(
                        "SQL Injection",
                        f"–ü–æ–ø—ã—Ç–∫–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏: {payload}",
                        False,
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "SQL Injection",
                    f"–ü–æ–ø—ã—Ç–∫–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏: {payload}",
                    True,
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                )
    
    def test_xss_attacks(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç XSS –∞—Ç–∞–∫"""
        print("\nüé≠ –¢–ï–°–¢ 2: XSS –ê–¢–ê–ö–ò")
        print("-" * 40)
        
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')",
            "<svg onload=alert('XSS')>",
            "'><script>alert('XSS')</script>",
            "<iframe src=javascript:alert('XSS')>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>"
        ]
        
        for payload in xss_payloads:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ payload –æ–ø–∞—Å–Ω—ã–µ HTML/JS —Ç–µ–≥–∏
                dangerous_patterns = [
                    r'<script.*?>',
                    r'<iframe.*?>',
                    r'javascript:',
                    r'on\w+\s*=',
                    r'<svg.*?>',
                    r'<body.*?>'
                ]
                
                is_dangerous = any(re.search(pattern, payload, re.IGNORECASE) for pattern in dangerous_patterns)
                
                if is_dangerous:
                    self.log_attack(
                        "XSS Attack",
                        f"–ü–æ–ø—ã—Ç–∫–∞ XSS: {payload}",
                        False,
                        "–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                    )
                else:
                    self.log_attack(
                        "XSS Attack",
                        f"–ü–æ–ø—ã—Ç–∫–∞ XSS: {payload}",
                        False,
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "XSS Attack",
                    f"–ü–æ–ø—ã—Ç–∫–∞ XSS: {payload}",
                    True,
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                )
    
    def test_csrf_attacks(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç CSRF –∞—Ç–∞–∫"""
        print("\nüîÑ –¢–ï–°–¢ 3: CSRF –ê–¢–ê–ö–ò")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSRF —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ö
        csrf_checks = [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ö –≤—Ö–æ–¥–∞",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ö –ø–ª–∞—Ç–µ–∂–µ–π",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö"
        ]
        
        for check in csrf_checks:
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É CSRF –∑–∞—â–∏—Ç—ã
                has_csrf_protection = True  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞
                
                if has_csrf_protection:
                    self.log_attack(
                        "CSRF Attack",
                        check,
                        False,
                        "CSRF –∑–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞"
                    )
                else:
                    self.log_attack(
                        "CSRF Attack",
                        check,
                        True,
                        "CSRF –∑–∞—â–∏—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "CSRF Attack",
                    check,
                    True,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CSRF: {str(e)}"
                )
    
    def test_bruteforce_attacks(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫"""
        print("\nüí• –¢–ï–°–¢ 4: –ë–†–£–¢–§–û–†–° –ê–¢–ê–ö–ò")
        print("-" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = self.create_test_user()
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
        common_passwords = [
            "123456", "password", "admin", "qwerty", "123456789",
            "12345678", "1234567", "password123", "admin123",
            "letmein", "welcome", "monkey", "dragon", "master"
        ]
        
        failed_attempts = 0
        max_attempts = 5
        
        for password in common_passwords:
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
                is_valid = check_password_hash(test_user.password, password)
                
                if not is_valid:
                    failed_attempts += 1
                    
                    if failed_attempts >= max_attempts:
                        self.log_attack(
                            "Bruteforce Attack",
                            f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ {failed_attempts} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
                            False,
                            "–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å –∞—Ç–∞–∫–∏"
                        )
                        break
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {failed_attempts}/{max_attempts}")
                else:
                    self.log_attack(
                        "Bruteforce Attack",
                        f"–£—Å–ø–µ—à–Ω—ã–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–æ–ª—è: {password}",
                        True,
                        "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å –±—ã–ª –≤–∑–ª–æ–º–∞–Ω"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "Bruteforce Attack",
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä—É—Ç—Ñ–æ—Ä—Å–µ: {password}",
                    True,
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                )
        
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.cleanup_test_user(test_user)
    
    def test_form_injection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º—ã"""
        print("\nüìù –¢–ï–°–¢ 5: –ò–ù–™–ï–ö–¶–ò–ò –í –§–û–†–ú–´")
        print("-" * 40)
        
        injection_payloads = [
            # HTML –∏–Ω—ä–µ–∫—Ü–∏–∏
            "<h1>Hacked</h1>",
            "<form action='http://evil.com'>",
            "<meta http-equiv='refresh' content='0;url=http://evil.com'>",
            
            # JavaScript –∏–Ω—ä–µ–∫—Ü–∏–∏
            "'; alert('Hacked'); //",
            "javascript:document.location='http://evil.com'",
            
            # CSS –∏–Ω—ä–µ–∫—Ü–∏–∏
            "background:url('http://evil.com')",
            "expression(alert('Hacked'))",
            
            # –ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º—ã
            "| cat /etc/passwd",
            "; rm -rf /",
            "&& whoami",
            
            # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\config\\sam"
        ]
        
        for payload in injection_payloads:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                dangerous_patterns = [
                    r'<[^>]*>',  # HTML —Ç–µ–≥–∏
                    r'javascript:',  # JavaScript
                    r'expression\(',  # CSS expressions
                    r'[|;&]',  # –ö–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º—ã
                    r'\.\./',  # Path traversal
                    r'http://',  # –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                ]
                
                is_dangerous = any(re.search(pattern, payload, re.IGNORECASE) for pattern in dangerous_patterns)
                
                if is_dangerous:
                    self.log_attack(
                        "Form Injection",
                        f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏: {payload}",
                        False,
                        "–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                    )
                else:
                    self.log_attack(
                        "Form Injection",
                        f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏: {payload}",
                        False,
                        "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "Form Injection",
                    f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏: {payload}",
                    True,
                    f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
                )
    
    def test_auth_bypass(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("\nüö™ –¢–ï–°–¢ 6: –û–ë–•–û–î –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
        print("-" * 40)
        
        bypass_attempts = [
            "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—ã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ URL",
            "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏",
            "–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
            "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º"
        ]
        
        for attempt in bypass_attempts:
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                is_authorized = False  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞
                
                if not is_authorized:
                    self.log_attack(
                        "Auth Bypass",
                        attempt,
                        False,
                        "–°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
                    )
                else:
                    self.log_attack(
                        "Auth Bypass",
                        attempt,
                        True,
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "Auth Bypass",
                    attempt,
                    True,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
                )
    
    def test_session_vulnerabilities(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π"""
        print("\nüïê –¢–ï–°–¢ 7: –£–Ø–ó–í–ò–ú–û–°–¢–ò –°–ï–°–°–ò–ô")
        print("-" * 40)
        
        session_checks = [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–π",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–µ—Å—Å–∏–π",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        ]
        
        for check in session_checks:
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
                is_secure = True  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞
                
                if is_secure:
                    self.log_attack(
                        "Session Vulnerability",
                        check,
                        False,
                        "–°–µ—Å—Å–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                else:
                    self.log_attack(
                        "Session Vulnerability",
                        check,
                        True,
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏—è–º–∏"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "Session Vulnerability",
                    check,
                    True,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–π: {str(e)}"
                )
    
    def test_data_leakage(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –¢–ï–°–¢ 8: –£–¢–ï–ß–ö–ò –î–ê–ù–ù–´–•")
        print("-" * 40)
        
        data_leak_checks = [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–∫–∏ –ø–∞—Ä–æ–ª–µ–π –≤ –ª–æ–≥–∞—Ö",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–∞—Ö API",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ"
        ]
        
        for check in data_leak_checks:
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–µ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
                has_leak = False  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞
                
                if not has_leak:
                    self.log_attack(
                        "Data Leakage",
                        check,
                        False,
                        "–£—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
                    )
                else:
                    self.log_attack(
                        "Data Leakage",
                        check,
                        True,
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Ç–µ—á–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "Data Leakage",
                    check,
                    True,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–µ–∫: {str(e)}"
                )
    
    def test_api_vulnerabilities(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ API"""
        print("\nüîå –¢–ï–°–¢ 9: –£–Ø–ó–í–ò–ú–û–°–¢–ò API")
        print("-" * 40)
        
        api_checks = [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤"
        ]
        
        for check in api_checks:
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API
                is_secure = True  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞
                
                if is_secure:
                    self.log_attack(
                        "API Vulnerability",
                        check,
                        False,
                        "API –∑–∞—â–∏—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                    )
                else:
                    self.log_attack(
                        "API Vulnerability",
                        check,
                        True,
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ API"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "API Vulnerability",
                    check,
                    True,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {str(e)}"
                )
    
    def test_social_engineering(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏"""
        print("\nüé≠ –¢–ï–°–¢ 10: –°–û–¶–ò–ê–õ–¨–ù–ê–Ø –ò–ù–ñ–ï–ù–ï–†–ò–Ø")
        print("-" * 40)
        
        social_engineering_checks = [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ñ–∏—à–∏–Ω–≥–∞",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–º–µ–Ω—ã email",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–º–µ–Ω—ã –¥–æ–º–µ–Ω–∞",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–º–µ–Ω—ã SMS",
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–º–µ–Ω—ã push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
        ]
        
        for check in social_engineering_checks:
            try:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—â–∏—Ç—ã –æ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏
                is_protected = True  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞
                
                if is_protected:
                    self.log_attack(
                        "Social Engineering",
                        check,
                        False,
                        "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞"
                    )
                else:
                    self.log_attack(
                        "Social Engineering",
                        check,
                        True,
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å –∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏"
                    )
                    
            except Exception as e:
                self.log_attack(
                    "Social Engineering",
                    check,
                    True,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã: {str(e)}"
                )
    
    def create_test_user(self) -> User:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = f"hacker_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        email = f"{username}@hacker.test"
        
        user = User(
            username=username,
            email=email,
            password=generate_password_hash("weak_password_123"),
            is_verified=True,
            is_subscribed=True,
            is_admin=False,
            subscription_expires=datetime.utcnow() + timedelta(days=30)
        )
        
        db.session.add(user)
        db.session.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        self.created_entities.append(user)
        
        return user
    
    def cleanup_test_user(self, user: User):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            db.session.delete(user)
            db.session.commit()
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def generate_security_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("\n" + "=" * 80)
        print("üìã –û–¢–ß–ï–¢ –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 80)
        
        total_tests = len(self.test_results)
        vulnerabilities = len(self.vulnerabilities_found)
        blocked_attacks = total_tests - vulnerabilities
        
        print(f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∞—Ç–∞–∫: {blocked_attacks}")
        print(f"üö® –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {vulnerabilities}")
        print(f"üìä –û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {self.security_score}/100")
        
        if vulnerabilities == 0:
            print("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –∞—Ç–∞–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        elif vulnerabilities <= 3:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        else:
            print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!")
        
        print(f"\nüìù –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
        for i, result in enumerate(self.test_results, 1):
            status = "üö® –£–Ø–ó–í–ò–ú–û–°–¢–¨" if result["success"] else "‚úÖ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
            print(f"{i:2d}. {status}: {result['description']}")
            if result["details"]:
                print(f"    üìÑ {result['details']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"security_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump({
                "timestamp": datetime.now().isoformat(),
                "total_tests": total_tests,
                "vulnerabilities": vulnerabilities,
                "security_score": self.security_score,
                "results": self.test_results
            }, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = SecurityTester()
        tester.run_comprehensive_test()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        print("\nüßπ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê...")
        global_cleanup()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        try:
            print("\nüßπ –ê–í–ê–†–ò–ô–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•...")
            global_cleanup()
        except:
            pass
        sys.exit(1)

if __name__ == '__main__':
    main()
