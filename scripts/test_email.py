#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–µ—Ä–≤–∏—Å–∞ EduFlow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É email, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_email.py
"""

import sys
import os
import time
from datetime import datetime, timedelta, timezone
from typing import Optional

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models import User, EmailVerification, PasswordReset
from app.utils.email_service import EmailService
from werkzeug.security import generate_password_hash

def test_email_service():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–µ—Ä–≤–∏—Å–∞"""
    print("üìß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EMAIL –°–ï–†–í–ò–°–ê EDUFLOW")
    print("=" * 60)
    
    app = create_app()
    
    with app.app_context():
        try:
            # –¢–µ—Å—Ç email —Å–µ—Ä–≤–∏—Å–∞
            email_service = test_email_service_basic()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = create_test_user()
            
            # –¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
            test_email_verification(email_service, test_user)
            
            # –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            test_password_reset(email_service, test_user)
            
            # –¢–µ—Å—Ç –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            test_verification_codes(test_user)
            
            # –¢–µ—Å—Ç –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            test_reset_codes(test_user)
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cleanup_test_data(test_user)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_email_service_basic() -> type:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª email —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîß –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û EMAIL –°–ï–†–í–ò–°–ê")
    print("-" * 40)
    
    try:
        # EmailService - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("   ‚úÖ Email —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if hasattr(EmailService, 'send_verification_email'):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        if hasattr(EmailService, 'send_password_reset_email'):
            print("   ‚úÖ –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return EmailService
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email —Å–µ—Ä–≤–∏—Å–∞: {e}")
        raise

def create_test_user() -> User:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüë§ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("-" * 40)
    
    try:
        username = f"email_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        email = f"{username}@test.com"
        
        user = User(
            username=username,
            email=email,
            password=generate_password_hash("test_password_123"),
            is_verified=False,
            is_subscribed=False,
            is_admin=False
        )
        
        db.session.add(user)
        db.session.commit()
        
        print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {username}")
        print(f"   üìß Email: {email}")
        
        return user
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise

def test_email_verification(email_service: type, user: User):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é email"""
    print("\n‚úÖ –¢–ï–°–¢ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò EMAIL")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verification_code = EmailVerification(
            user_id=user.id,
            code="123456",
            expires_at=datetime.now(timezone.utc) + timedelta(minutes=10),
            is_used=False
        )
        db.session.add(verification_code)
        db.session.commit()
        
        print("   ‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
        try:
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("   ‚úÖ Email —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if verification_code.code == "123456" and not verification_code.is_used:
            print("   ‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–µ–Ω")
        else:
            print("   ‚ùå –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

def test_password_reset(email_service: type, user: User):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è"""
    print("\nüîê –¢–ï–°–¢ –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        reset_code = PasswordReset(
            email=user.email,
            code="654321",
            expires_at=datetime.now(timezone.utc) + timedelta(minutes=15),
            is_used=False
        )
        db.session.add(reset_code)
        db.session.commit()
        
        print("   ‚úÖ –ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å–æ–∑–¥–∞–Ω")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        try:
            # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
            print("   ‚úÖ Email —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
        if reset_code.code == "654321" and not reset_code.is_used:
            print("   ‚úÖ –ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –≤–∞–ª–∏–¥–µ–Ω")
        else:
            print("   ‚ùå –ö–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: {e}")

def test_verification_codes(user: User):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüî¢ –¢–ï–°–¢ –ö–û–î–û–í –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        codes = []
        for i in range(3):
            code = EmailVerification(
                user_id=user.id,
                code=f"11111{i}",
                expires_at=datetime.now(timezone.utc) + timedelta(minutes=5),
                is_used=False
            )
            codes.append(code)
            db.session.add(code)
        
        db.session.commit()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(codes)} –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤
        active_codes = EmailVerification.query.filter_by(
            user_id=user.id, 
            is_used=False
        ).filter(
            EmailVerification.expires_at > datetime.now(timezone.utc)
        ).count()
        
        print(f"   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {active_codes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤
        expired_codes = EmailVerification.query.filter_by(
            user_id=user.id
        ).filter(
            EmailVerification.expires_at <= datetime.now(timezone.utc)
        ).count()
        
        print(f"   ‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {expired_codes}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

def test_reset_codes(user: User):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–¥—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    print("\nüî¢ –¢–ï–°–¢ –ö–û–î–û–í –°–ë–†–û–°–ê –ü–ê–†–û–õ–Ø")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        codes = []
        for i in range(3):
            code = PasswordReset(
                email=user.email,
                code=f"22222{i}",
                expires_at=datetime.now(timezone.utc) + timedelta(minutes=10),
                is_used=False
            )
            codes.append(code)
            db.session.add(code)
        
        db.session.commit()
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(codes)} –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤
        active_codes = PasswordReset.query.filter_by(
            email=user.email, 
            is_used=False
        ).filter(
            PasswordReset.expires_at > datetime.now(timezone.utc)
        ).count()
        
        print(f"   üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞: {active_codes}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤
        expired_codes = PasswordReset.query.filter_by(
            email=user.email
        ).filter(
            PasswordReset.expires_at <= datetime.now(timezone.utc)
        ).count()
        
        print(f"   ‚è∞ –ò—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤: {expired_codes}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞: {e}")

def cleanup_test_data(user: User):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("-" * 40)
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        verification_codes = EmailVerification.query.filter_by(user_id=user.id).all()
        for code in verification_codes:
            db.session.delete(code)
        if verification_codes:
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(verification_codes)} –∫–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–¥—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reset_codes = PasswordReset.query.filter_by(email=user.email).all()
        for code in reset_codes:
            db.session.delete(code)
        if reset_codes:
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(reset_codes)} –∫–æ–¥–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.session.delete(user)
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        cleanup_patterns = [
            (User, User.username.like('email_test_%')),
            (EmailVerification, EmailVerification.code.like('11111%')),
            (EmailVerification, EmailVerification.code.like('22222%')),
            (PasswordReset, PasswordReset.code.like('11111%')),
            (PasswordReset, PasswordReset.code.like('22222%'))
        ]
        
        for model, pattern in cleanup_patterns:
            try:
                entities = model.query.filter(pattern).all()
                for entity in entities:
                    db.session.delete(entity)
                if entities:
                    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(entities)} {model.__name__} –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {model.__name__} –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {e}")
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        print("   üíæ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        test_email_service()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
