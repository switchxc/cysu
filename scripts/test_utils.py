#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cysu

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤:
- –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –û–±—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
"""

import sys
import os
from pathlib import Path
from typing import List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app import create_app, db
from app.models import User, Subject, Material, Submission, Payment, ChatMessage, Ticket
from datetime import datetime


def global_cleanup() -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    app = create_app()
    
    with app.app_context():
        print("üßπ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        try:
            # 1. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cleanup_test_users()
            
            # 2. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            cleanup_test_subjects()
            
            # 3. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            cleanup_test_materials()
            
            # 4. –û—á–∏—Å—Ç–∫–∞ orphaned –∑–∞–ø–∏—Å–µ–π
            cleanup_orphaned_records()
            
            # 5. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            cleanup_temp_files()
            
            db.session.commit()
            print("   ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
            db.session.rollback()


def cleanup_test_users() -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_patterns = [
            'test_%',
            'hacker_test_%',
            'test_user_%',
            'test_security_%',
            'test_payment_%',
            'test_site_%'
        ]
        
        total_deleted = 0
        
        for pattern in test_patterns:
            users = User.query.filter(User.username.like(pattern)).all()
            for user in users:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    Payment.query.filter_by(user_id=user.id).delete()
                    Submission.query.filter_by(user_id=user.id).delete()
                    ChatMessage.query.filter_by(user_id=user.id).delete()
                    Ticket.query.filter_by(user_id=user.id).delete()
                    
                    db.session.delete(user)
                    total_deleted += 1
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ email
        test_email_users = User.query.filter(User.email.like('%@test.com')).all()
        for user in test_email_users:
            try:
                Payment.query.filter_by(user_id=user.id).delete()
                Submission.query.filter_by(user_id=user.id).delete()
                ChatMessage.query.filter_by(user_id=user.id).delete()
                Ticket.query.filter_by(user_id=user.id).delete()
                
                db.session.delete(user)
                total_deleted += 1
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email {user.email}: {e}")
        
        if total_deleted > 0:
            print(f"   üë• –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_deleted}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def cleanup_test_subjects() -> None:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        test_patterns = [
            'Test%',
            'Test Subject%',
            '–¢–µ—Å—Ç–æ–≤—ã–π%'
        ]
        
        total_deleted = 0
        
        for pattern in test_patterns:
            subjects = Subject.query.filter(Subject.title.like(pattern)).all()
            for subject in subjects:
                try:
                    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                    Material.query.filter_by(subject_id=subject.id).delete()
                    db.session.delete(subject)
                    total_deleted += 1
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject.title}: {e}")
        
        if total_deleted > 0:
            print(f"   üìö –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {total_deleted}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")


def cleanup_test_materials() -> None:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        test_patterns = [
            'Test%',
            'Test Material%',
            '–¢–µ—Å—Ç–æ–≤—ã–π%'
        ]
        
        total_deleted = 0
        
        for pattern in test_patterns:
            materials = Material.query.filter(Material.title.like(pattern)).all()
            for material in materials:
                try:
                    db.session.delete(material)
                    total_deleted += 1
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {material.title}: {e}")
        
        if total_deleted > 0:
            print(f"   üìÑ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_deleted}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")


def cleanup_orphaned_records() -> None:
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = [u.id for u in User.query.all()]
        
        # –£–¥–∞–ª—è–µ–º orphaned –∑–∞–ø–∏—Å–∏
        orphaned_payments = Payment.query.filter(~Payment.user_id.in_(user_ids)).all()
        orphaned_submissions = Submission.query.filter(~Submission.user_id.in_(user_ids)).all()
        orphaned_messages = ChatMessage.query.filter(~ChatMessage.user_id.in_(user_ids)).all()
        orphaned_tickets = Ticket.query.filter(~Ticket.user_id.in_(user_ids)).all()
        
        # –£–¥–∞–ª—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        for payment in orphaned_payments:
            try:
                db.session.delete(payment)
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ orphaned –ø–ª–∞—Ç–µ–∂–∞ {payment.id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ—à–µ–Ω–∏—è
        for submission in orphaned_submissions:
            try:
                db.session.delete(submission)
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ orphaned —Ä–µ—à–µ–Ω–∏—è {submission.id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for message in orphaned_messages:
            try:
                db.session.delete(message)
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ orphaned —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–∏–∫–µ—Ç—ã
        for ticket in orphaned_tickets:
            try:
                db.session.delete(ticket)
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ orphaned —Ç–∏–∫–µ—Ç–∞ {ticket.id}: {e}")
        
        total_orphaned = len(orphaned_payments) + len(orphaned_submissions) + len(orphaned_messages) + len(orphaned_tickets)
        
        if total_orphaned > 0:
            print(f"   üßπ –£–¥–∞–ª–µ–Ω–æ orphaned –∑–∞–ø–∏—Å–µ–π: {total_orphaned}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ orphaned –∑–∞–ø–∏—Å–µ–π: {e}")


def cleanup_temp_files() -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        # –ü–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        temp_folders = [
            "app/static/uploads",
            "app/static/chat_files",
            "app/static/ticket_files"
        ]
        
        total_files = 0
        
        for folder_path in temp_folders:
            folder = Path(folder_path)
            if folder.exists():
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
                current_time = datetime.now()
                for file_path in folder.glob("*"):
                    if file_path.is_file():
                        try:
                            file_age = current_time - datetime.fromtimestamp(file_path.stat().st_mtime)
                            if file_age.total_seconds() > 3600:  # 1 —á–∞—Å
                                file_path.unlink()
                                total_files += 1
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        if total_files > 0:
            print(f"   üìÅ –£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_files}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")


def get_test_statistics() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    app = create_app()
    
    with app.app_context():
        stats = {
            'test_users': User.query.filter(User.username.like('test_%')).count(),
            'test_subjects': Subject.query.filter(Subject.title.like('Test%')).count(),
            'test_materials': Material.query.filter(Material.title.like('Test%')).count(),
            'total_payments': Payment.query.count(),
            'total_submissions': Submission.query.count(),
            'total_messages': ChatMessage.query.count(),
            'total_tickets': Ticket.query.count()
        }
        
        return stats


if __name__ == '__main__':
    # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
    global_cleanup()
