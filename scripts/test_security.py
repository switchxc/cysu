#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ cysu

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_security.py

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
- –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
- CSRF –∑–∞—â–∏—Ç—É
- –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models import User
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import random
import string
from scripts.test_utils import global_cleanup


def test_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
    app = create_app()
    
    with app.app_context():
        print("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ cysu")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
        print(f"\nüîê –¢–µ—Å—Ç 1: –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π")
        test_password_hashing()
        
        # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        print(f"\n‚úÖ –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        test_data_validation()
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\nüë§ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        test_user = create_test_user()
        
        # –¢–µ—Å—Ç 4: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print(f"\nüîë –¢–µ—Å—Ç 4: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        test_authentication(test_user)
        
        # –¢–µ—Å—Ç 5: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        print(f"\nüëë –¢–µ—Å—Ç 5: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        test_access_control(test_user)
        
        # –¢–µ—Å—Ç 6: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
        print(f"\nüõ°Ô∏è –¢–µ—Å—Ç 6: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π")
        test_session_security()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        cleanup_test_data(test_user)
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_password_hashing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π"""
    try:
        print(f"   üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞
        test_password = "test_password_123"
        password_hash = generate_password_hash(test_password)
        print(f"      ‚úÖ –•–µ—à —Å–æ–∑–¥–∞–Ω: {password_hash[:20]}...")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        is_valid = check_password_hash(password_hash, test_password)
        print(f"      ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {is_valid}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        is_invalid = check_password_hash(password_hash, "wrong_password")
        print(f"      ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {is_invalid}")
        
        # –¢–µ—Å—Ç 4: –†–∞–∑–Ω—ã–µ —Ö–µ—à–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        hash1 = generate_password_hash(test_password)
        hash2 = generate_password_hash(test_password)
        print(f"      üîÑ –†–∞–∑–Ω—ã–µ —Ö–µ—à–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {hash1 != hash2}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π
        weak_passwords = ["123", "password", "admin", "qwerty"]
        strong_passwords = ["MySecurePass123!", "Complex@Password#2024", "StrongP@ssw0rd!"]
        
        print(f"      üìä –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π:")
        for password in weak_passwords:
            is_weak = len(password) < 8 or password.islower() or password.isdigit()
            print(f"         '{password}': {'–°–ª–∞–±—ã–π' if is_weak else '–°–∏–ª—å–Ω—ã–π'}")
        
        for password in strong_passwords:
            is_strong = len(password) >= 8 and not password.islower() and not password.isdigit()
            print(f"         '{password}': {'–°–∏–ª—å–Ω—ã–π' if is_strong else '–°–ª–∞–±—ã–π'}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def test_data_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print(f"   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–∞—Ü–∏—è email
        valid_emails = ["test@example.com", "user.name@domain.co.uk", "admin@test.ru"]
        invalid_emails = ["invalid-email", "@domain.com", "user@", "test..test@domain.com"]
        
        print(f"      üìß –í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–æ–≤:")
        for email in valid_emails:
            is_valid = "@" in email and "." in email.split("@")[1]
            print(f"         '{email}': {'–í–∞–ª–∏–¥–Ω—ã–π' if is_valid else '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}")
        
        for email in invalid_emails:
            is_valid = "@" in email and "." in email.split("@")[1]
            print(f"         '{email}': {'–í–∞–ª–∏–¥–Ω—ã–π' if is_valid else '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}")
        
        # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è username
        valid_usernames = ["user123", "admin_user", "test-user", "user_name"]
        invalid_usernames = ["", "a", "user@name", "user name", "123user"]
        
        print(f"      üë§ –í–∞–ª–∏–¥–∞—Ü–∏—è username:")
        for username in valid_usernames:
            is_valid = len(username) >= 3 and username.replace("_", "").replace("-", "").isalnum()
            print(f"         '{username}': {'–í–∞–ª–∏–¥–Ω—ã–π' if is_valid else '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}")
        
        for username in invalid_usernames:
            is_valid = len(username) >= 3 and username.replace("_", "").replace("-", "").isalnum()
            print(f"         '{username}': {'–í–∞–ª–∏–¥–Ω—ã–π' if is_valid else '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}")
        
        # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
        passwords = ["123", "12345", "123456", "1234567", "12345678", "123456789"]
        print(f"      üîë –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è:")
        for password in passwords:
            is_strong = len(password) >= 8
            print(f"         '{password}': {'–°–∏–ª—å–Ω—ã–π' if is_strong else '–°–ª–∞–±—ã–π'} ({len(password)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = f"test_security_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    email = f"{username}@test.com"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = User.query.filter_by(username=username).first()
    if existing_user:
        return existing_user
    
    user = User(
        username=username,
        email=email,
        password=generate_password_hash("test_security_123"),
        is_verified=True,
        is_subscribed=True,
        is_admin=False,
        subscription_expires=datetime.utcnow() + timedelta(days=30)
    )
    
    db.session.add(user)
    db.session.commit()
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
    return user

def test_authentication(user):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    try:
        print(f"   üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        is_valid = check_password_hash(user.password, "test_security_123")
        print(f"      ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {is_valid}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        is_invalid = check_password_hash(user.password, "wrong_password")
        print(f"      ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å: {is_invalid}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"      üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        print(f"         –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {user.is_verified}")
        print(f"         –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {user.is_admin}")
        print(f"         –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {user.is_subscribed}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        if user.subscription_expires:
            days_left = (user.subscription_expires - datetime.utcnow()).days
            print(f"         –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {days_left}")
            print(f"         –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {days_left > 0}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

def test_access_control(user):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        print(f"   üëë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        roles = []
        if user.is_admin:
            roles.append("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        if user.is_verified:
            roles.append("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        if user.is_subscribed:
            roles.append("–ü–æ–¥–ø–∏—Å—á–∏–∫")
        
        print(f"      üé≠ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {', '.join(roles) if roles else '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
        access_levels = {
            "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤": user.is_subscribed,
            "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤": user.is_verified,
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å": user.is_admin,
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏": user.is_admin,
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤": user.is_admin,
            "–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π": user.is_verified
        }
        
        print(f"      üîì –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:")
        for function, has_access in access_levels.items():
            status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if has_access else "‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω"
            print(f"         {function}: {status}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        sensitive_fields = ["password", "email", "subscription_expires"]
        print(f"      üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        for field in sensitive_fields:
            if hasattr(user, field):
                value = getattr(user, field)
                if field == "password":
                    is_hashed = value.startswith("pbkdf2:sha256:") or value.startswith("scrypt:")
                    print(f"         {field}: {'–•–µ—à–∏—Ä–æ–≤–∞–Ω' if is_hashed else '–ù–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω'}")
                else:
                    print(f"         {field}: {'–ó–∞–ø–æ–ª–Ω–µ–Ω–æ' if value else '–ü—É—Å—Ç–æ'}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")

def test_session_security():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π"""
    try:
        print(f"   üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
        from flask import current_app
        session_config = {
            'SECRET_KEY': current_app.config.get('SECRET_KEY'),
            'SESSION_COOKIE_SECURE': current_app.config.get('SESSION_COOKIE_SECURE', False),
            'SESSION_COOKIE_HTTPONLY': current_app.config.get('SESSION_COOKIE_HTTPONLY', True),
            'PERMANENT_SESSION_LIFETIME': current_app.config.get('PERMANENT_SESSION_LIFETIME', timedelta(hours=24))
        }
        
        print(f"      ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π:")
        for key, value in session_config.items():
            if key == 'SECRET_KEY':
                is_secure = len(str(value)) >= 32 and value != 'default-secret-key-change-in-production'
                print(f"         {key}: {'–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π' if is_secure else '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π'}")
            elif key == 'PERMANENT_SESSION_LIFETIME':
                hours = value.total_seconds() / 3600
                print(f"         {key}: {hours:.1f} —á–∞—Å–æ–≤")
            else:
                status = "–í–∫–ª—é—á–µ–Ω–æ" if value else "–û—Ç–∫–ª—é—á–µ–Ω–æ"
                print(f"         {key}: {status}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª–µ–π
        print(f"      üîê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        recommendations = [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ",
            "–†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ SECRET_KEY",
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SESSION_COOKIE_SECURE=True –¥–ª—è HTTPS",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)",
            "–í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
            "–õ–æ–≥–∏—Ä—É–π—Ç–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
        ]
        
        for i, recommendation in enumerate(recommendations, 1):
            print(f"         {i}. {recommendation}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π: {e}")

def cleanup_test_data(user):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        if user:
            try:
                db.session.delete(user)
                db.session.commit()
                print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                db.session.rollback()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        cleanup_by_pattern()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


def cleanup_by_pattern():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏–º–µ–Ω"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        test_users = User.query.filter(User.username.like('test_security_%')).all()
        for user in test_users:
            try:
                db.session.delete(user)
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ email
        test_email_users = User.query.filter(User.email.like('%@test.com')).all()
        for user in test_email_users:
            try:
                db.session.delete(user)
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º email {user.email}: {e}")
        
        db.session.commit()
        
        if test_users or test_email_users:
            print(f"   üßπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {len(test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ username, {len(test_email_users)} –ø–æ email")
        
    except Exception as e:
        print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")
        db.session.rollback()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        test_security()
        
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
        print(f"\nüßπ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        global_cleanup()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        try:
            global_cleanup()
        except:
            pass
        sys.exit(1)

if __name__ == '__main__':
    main()
