#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö EduFlow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/test_database.py
"""

import sys
import os
import time
from datetime import datetime, timedelta
from typing import Dict, Any

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app, db
from app.models import User, Subject, Material, Submission, ShortLink


def test_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• EDUFLOW")
    print("=" * 60)

    app = create_app()

    with app.app_context():
        try:
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            test_database_connection()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_data = create_test_data()

            # –¢–µ—Å—Ç —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
            test_model_relationships(test_data)

            # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            test_data_validation()

            # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            test_query_performance()

            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            test_database_statistics()

        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cleanup_test_data(test_data)

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîå –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("-" * 40)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        db.engine.connect()
        print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        inspector = db.inspect(db.engine)
        tables = inspector.get_table_names()
        print(f"   üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")

        for table in tables:
            print(f"      - {table}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


def create_test_data() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("-" * 40)

    test_data = {}

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            username=f"test_user_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            email=f"test_{datetime.now().strftime('%Y%m%d_%H%M%S')}@test.com",
            password="test_password_hash",
            is_verified=True,
            is_subscribed=True,
            is_admin=False,
            subscription_expires=datetime.utcnow() + timedelta(days=30),
        )
        db.session.add(test_user)
        db.session.flush()
        test_data["user"] = test_user
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        test_subject = Subject(
            title=f"Test Subject {datetime.now().strftime('%Y%m%d_%H%M%S')}",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        )
        db.session.add(test_subject)
        db.session.flush()
        test_data["subject"] = test_subject
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        test_material = Material(
            title=f"Test Material {datetime.now().strftime('%Y%m%d_%H%M%S')}",
            description="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
            type="lecture",
            subject_id=test_subject.id,
        )
        db.session.add(test_material)
        db.session.flush()
        test_data["material"] = test_material
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        test_submission = Submission(
            user_id=test_user.id,
            material_id=test_material.id,
            text=f"Test submission {datetime.now().strftime('%Y%m%d_%H%M%S')}",
            submitted_at=datetime.utcnow(),
        )
        db.session.add(test_submission)
        db.session.flush()
        test_data["submission"] = test_submission
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
        test_link = ShortLink(
            original_url="https://test.com",
            code=f"test_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
        )
        db.session.add(test_link)
        db.session.flush()
        test_data["link"] = test_link
        print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")

        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        print("   üíæ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()
        raise

    return test_data


def test_model_relationships(test_data: Dict[str, Any]):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîó –¢–ï–°–¢ –°–í–Ø–ó–ï–ô –ú–ï–ñ–î–£ –ú–û–î–ï–õ–Ø–ú–ò")
    print("-" * 40)

    try:
        user = test_data["user"]
        subject = test_data["subject"]
        material = test_data["material"]

        # –¢–µ—Å—Ç —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        user_materials = Material.query.join(Subject).all()
        print(
            f"   ‚úÖ –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {len(user_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
        )

        # –¢–µ—Å—Ç —Å–≤—è–∑–∏ –ø—Ä–µ–¥–º–µ—Ç -> –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        subject_materials = Material.query.filter_by(subject_id=subject.id).all()
        print(f"   ‚úÖ –°–≤—è–∑—å –ø—Ä–µ–¥–º–µ—Ç -> –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {len(subject_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

        # –¢–µ—Å—Ç —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –∑–∞–¥–∞–Ω–∏—è
        user_submissions = Submission.query.filter_by(user_id=user.id).all()
        print(f"   ‚úÖ –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> –∑–∞–¥–∞–Ω–∏—è: {len(user_submissions)} –∑–∞–¥–∞–Ω–∏–π")

        # –¢–µ—Å—Ç —Å–≤—è–∑–∏ –º–∞—Ç–µ—Ä–∏–∞–ª -> –∑–∞–¥–∞–Ω–∏—è
        material_submissions = Submission.query.filter_by(material_id=material.id).all()
        print(f"   ‚úÖ –°–≤—è–∑—å –º–∞—Ç–µ—Ä–∏–∞–ª -> –∑–∞–¥–∞–Ω–∏—è: {len(material_submissions)} –∑–∞–¥–∞–Ω–∏–π")

        # –¢–µ—Å—Ç —Å–≤—è–∑–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        total_links = ShortLink.query.count()
        print(f"   ‚úÖ –í—Å–µ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫: {total_links}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π: {e}")


def test_data_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    print("\n‚úÖ –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò –î–ê–ù–ù–´–•")
    print("-" * 40)

    try:
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
        invalid_emails = [
            "invalid_email",
            "@test.com",
            "test@",
            "test..test@test.com",
            "test@test..com",
        ]

        for email in invalid_emails:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email
                user = User(
                    username="test_validation", email=email, password="password"
                )
                db.session.add(user)
                db.session.flush()
                print(f"   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è: {email}")
                db.session.rollback()
            except Exception:
                print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è: {email}")

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
        try:
            user = User(
                username="test_validation",
                email="test@test.com",
                password="",  # –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
            )
            db.session.add(user)
            db.session.flush()
            print("   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            db.session.rollback()
        except Exception:
            print("   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")


def test_query_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ó–ê–ü–†–û–°–û–í")
    print("-" * 40)

    try:
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        User.query.count()
        simple_query_time = time.time() - start_time
        print(f"   ‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {simple_query_time:.4f} —Å–µ–∫")

        # –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å JOIN
        start_time = time.time()
        db.session.query(User, Subject, Material).join(
            Submission, User.id == Submission.user_id
        ).join(Material, Submission.material_id == Material.id).join(
            Subject, Material.subject_id == Subject.id
        ).limit(10).all()
        complex_query_time = time.time() - start_time
        print(f"   ‚úÖ –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN: {complex_query_time:.4f} —Å–µ–∫")

        # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        start_time = time.time()
        User.query.filter(User.is_verified).all()
        filtered_query_time = time.time() - start_time
        print(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {filtered_query_time:.4f} —Å–µ–∫")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")


def test_database_statistics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–ï–°–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 40)

    try:
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = User.query.count()
        verified_users = User.query.filter_by(is_verified=True).count()
        subscribed_users = User.query.filter_by(is_subscribed=True).count()
        admin_users = User.query.filter_by(is_admin=True).count()

        print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {verified_users}")
        print(f"   üí∞ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribed_users}")
        print(f"   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}")

        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        total_subjects = Subject.query.count()
        total_materials = Material.query.count()

        print(f"   üìö –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {total_subjects}")
        print(f"   üìñ –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_materials}")

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞–Ω–∏–π
        total_submissions = Submission.query.count()
        recent_submissions = Submission.query.filter(
            Submission.submitted_at >= datetime.utcnow() - timedelta(days=7)
        ).count()

        print(f"   üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_submissions}")
        print(f"   üÜï –ó–∞–¥–∞–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {recent_submissions}")

        # –ü–æ–¥—Å—á–µ—Ç —Å—Å—ã–ª–æ–∫
        total_links = ShortLink.query.count()

        print(f"   üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def cleanup_test_data(test_data: Dict[str, Any]):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüßπ –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("-" * 40)

    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
        entities_to_delete = ["submission", "link", "material", "subject", "user"]

        for entity_key in entities_to_delete:
            if entity_key in test_data:
                entity = test_data[entity_key]
                try:
                    db.session.delete(entity)
                    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω {entity_key}: {type(entity).__name__}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {entity_key}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        cleanup_patterns = [
            (User, User.username.like("test_user_%")),
            (Subject, Subject.title.like("Test Subject%")),
            (Material, Material.title.like("Test Material%")),
            (Submission, Submission.text.like("Test submission%")),
            (ShortLink, ShortLink.code.like("test_%")),
        ]

        for model, pattern in cleanup_patterns:
            try:
                entities = model.query.filter(pattern).all()
                for entity in entities:
                    db.session.delete(entity)
                if entities:
                    print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(entities)} {model.__name__} –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {model.__name__} –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: {e}")

        # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        print("   üíæ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.session.rollback()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        test_database()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
